// Code generated by MockGen. DO NOT EDIT.
// Source: internal/smartcontracts/secureDataTransfer/SecureDataSmartContract.go
//
// Generated by this command:
//
//	mockgen -source=internal/smartcontracts/secureDataTransfer/SecureDataSmartContract.go -destination=Mock_secureDataContract.go
//

// Package mock_secureDataTransfer is a generated GoMock package.
package mock_secureDataTransfer

import (
	model "SimpleId/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSecureDataSmartContract is a mock of SecureDataSmartContract interface.
type MockSecureDataSmartContract struct {
	ctrl     *gomock.Controller
	recorder *MockSecureDataSmartContractMockRecorder
}

// MockSecureDataSmartContractMockRecorder is the mock recorder for MockSecureDataSmartContract.
type MockSecureDataSmartContractMockRecorder struct {
	mock *MockSecureDataSmartContract
}

// NewMockSecureDataSmartContract creates a new mock instance.
func NewMockSecureDataSmartContract(ctrl *gomock.Controller) *MockSecureDataSmartContract {
	mock := &MockSecureDataSmartContract{ctrl: ctrl}
	mock.recorder = &MockSecureDataSmartContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecureDataSmartContract) EXPECT() *MockSecureDataSmartContractMockRecorder {
	return m.recorder
}

// DeploySecureDataContract mocks base method.
func (m *MockSecureDataSmartContract) DeploySecureDataContract() (model.DeployResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeploySecureDataContract")
	ret0, _ := ret[0].(model.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeploySecureDataContract indicates an expected call of DeploySecureDataContract.
func (mr *MockSecureDataSmartContractMockRecorder) DeploySecureDataContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeploySecureDataContract", reflect.TypeOf((*MockSecureDataSmartContract)(nil).DeploySecureDataContract))
}

// LoadSecureDataContract mocks base method.
func (m *MockSecureDataSmartContract) LoadSecureDataContract(contractAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSecureDataContract", contractAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LoadSecureDataContract indicates an expected call of LoadSecureDataContract.
func (mr *MockSecureDataSmartContractMockRecorder) LoadSecureDataContract(contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSecureDataContract", reflect.TypeOf((*MockSecureDataSmartContract)(nil).LoadSecureDataContract), contractAddress)
}

// ReceiveData mocks base method.
func (m *MockSecureDataSmartContract) ReceiveData() (model.TransactionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveData")
	ret0, _ := ret[0].(model.TransactionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveData indicates an expected call of ReceiveData.
func (mr *MockSecureDataSmartContractMockRecorder) ReceiveData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveData", reflect.TypeOf((*MockSecureDataSmartContract)(nil).ReceiveData))
}

// SendData mocks base method.
func (m *MockSecureDataSmartContract) SendData(input model.DataToSend) (model.TransactionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendData", input)
	ret0, _ := ret[0].(model.TransactionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendData indicates an expected call of SendData.
func (mr *MockSecureDataSmartContractMockRecorder) SendData(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendData", reflect.TypeOf((*MockSecureDataSmartContract)(nil).SendData), input)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/smartcontracts/identityManagement/IdentitySmartContract.go
//
// Generated by this command:
//
//	mockgen -source=internal/smartcontracts/identityManagement/IdentitySmartContract.go -destination=Mock_identitySmartContract.go
//

// Package mock_identityManagement is a generated GoMock package.
package mock_identityManagement

import (
	model "SimpleId/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIdentitySmartContract is a mock of IdentitySmartContract interface.
type MockIdentitySmartContract struct {
	ctrl     *gomock.Controller
	recorder *MockIdentitySmartContractMockRecorder
}

// MockIdentitySmartContractMockRecorder is the mock recorder for MockIdentitySmartContract.
type MockIdentitySmartContractMockRecorder struct {
	mock *MockIdentitySmartContract
}

// NewMockIdentitySmartContract creates a new mock instance.
func NewMockIdentitySmartContract(ctrl *gomock.Controller) *MockIdentitySmartContract {
	mock := &MockIdentitySmartContract{ctrl: ctrl}
	mock.recorder = &MockIdentitySmartContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentitySmartContract) EXPECT() *MockIdentitySmartContractMockRecorder {
	return m.recorder
}

// AddStakeholder mocks base method.
func (m *MockIdentitySmartContract) AddStakeholder(stakeholderAddress string) (model.TransactionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStakeholder", stakeholderAddress)
	ret0, _ := ret[0].(model.TransactionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStakeholder indicates an expected call of AddStakeholder.
func (mr *MockIdentitySmartContractMockRecorder) AddStakeholder(stakeholderAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStakeholder", reflect.TypeOf((*MockIdentitySmartContract)(nil).AddStakeholder), stakeholderAddress)
}

// AddUserInformation mocks base method.
func (m *MockIdentitySmartContract) AddUserInformation(input model.UserInformation) (model.TransactionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserInformation", input)
	ret0, _ := ret[0].(model.TransactionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserInformation indicates an expected call of AddUserInformation.
func (mr *MockIdentitySmartContractMockRecorder) AddUserInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserInformation", reflect.TypeOf((*MockIdentitySmartContract)(nil).AddUserInformation), input)
}

// DeployIdentityContract mocks base method.
func (m *MockIdentitySmartContract) DeployIdentityContract() (model.DeployResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployIdentityContract")
	ret0, _ := ret[0].(model.DeployResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeployIdentityContract indicates an expected call of DeployIdentityContract.
func (mr *MockIdentitySmartContractMockRecorder) DeployIdentityContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployIdentityContract", reflect.TypeOf((*MockIdentitySmartContract)(nil).DeployIdentityContract))
}

// GetUserInformation mocks base method.
func (m *MockIdentitySmartContract) GetUserInformation() (model.UserInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInformation")
	ret0, _ := ret[0].(model.UserInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInformation indicates an expected call of GetUserInformation.
func (mr *MockIdentitySmartContractMockRecorder) GetUserInformation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInformation", reflect.TypeOf((*MockIdentitySmartContract)(nil).GetUserInformation))
}

// LoadIdentityContract mocks base method.
func (m *MockIdentitySmartContract) LoadIdentityContract(contractAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIdentityContract", contractAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// LoadIdentityContract indicates an expected call of LoadIdentityContract.
func (mr *MockIdentitySmartContractMockRecorder) LoadIdentityContract(contractAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIdentityContract", reflect.TypeOf((*MockIdentitySmartContract)(nil).LoadIdentityContract), contractAddress)
}

// UpdateUserInformation mocks base method.
func (m *MockIdentitySmartContract) UpdateUserInformation(input model.UserInformation) (model.TransactionResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInformation", input)
	ret0, _ := ret[0].(model.TransactionResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserInformation indicates an expected call of UpdateUserInformation.
func (mr *MockIdentitySmartContractMockRecorder) UpdateUserInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInformation", reflect.TypeOf((*MockIdentitySmartContract)(nil).UpdateUserInformation), input)
}
